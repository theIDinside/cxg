use glfw::ffi as glfwffi;
use serde::{Deserialize, Serialize};

bitflags::bitflags! {
    #[doc = "Key modifiers (e.g., Shift, Control, Alt, Super)"]
    #[derive(Deserialize, Serialize)]
    pub struct ModifiersImpl: ::std::os::raw::c_int {
        const SHIFT       = glfwffi::MOD_SHIFT;
        const CONTROL     = glfwffi::MOD_CONTROL;
        const ALT         = glfwffi::MOD_ALT;
        const SUPER       = glfwffi::MOD_SUPER;
        const CAPS_LOCK    = glfwffi::MOD_CAPS_LOCK;
        const NUM_LOCK     = glfwffi::MOD_NUM_LOCK;
    }
}

/// Input keys.
#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Deserialize, Serialize)]
pub enum KeyImpl {
    Space = glfwffi::KEY_SPACE,
    Apostrophe = glfwffi::KEY_APOSTROPHE,
    Comma = glfwffi::KEY_COMMA,
    Minus = glfwffi::KEY_MINUS,
    Period = glfwffi::KEY_PERIOD,
    Slash = glfwffi::KEY_SLASH,
    Num0 = glfwffi::KEY_0,
    Num1 = glfwffi::KEY_1,
    Num2 = glfwffi::KEY_2,
    Num3 = glfwffi::KEY_3,
    Num4 = glfwffi::KEY_4,
    Num5 = glfwffi::KEY_5,
    Num6 = glfwffi::KEY_6,
    Num7 = glfwffi::KEY_7,
    Num8 = glfwffi::KEY_8,
    Num9 = glfwffi::KEY_9,
    Semicolon = glfwffi::KEY_SEMICOLON,
    Equal = glfwffi::KEY_EQUAL,
    A = glfwffi::KEY_A,
    B = glfwffi::KEY_B,
    C = glfwffi::KEY_C,
    D = glfwffi::KEY_D,
    E = glfwffi::KEY_E,
    F = glfwffi::KEY_F,
    G = glfwffi::KEY_G,
    H = glfwffi::KEY_H,
    I = glfwffi::KEY_I,
    J = glfwffi::KEY_J,
    K = glfwffi::KEY_K,
    L = glfwffi::KEY_L,
    M = glfwffi::KEY_M,
    N = glfwffi::KEY_N,
    O = glfwffi::KEY_O,
    P = glfwffi::KEY_P,
    Q = glfwffi::KEY_Q,
    R = glfwffi::KEY_R,
    S = glfwffi::KEY_S,
    T = glfwffi::KEY_T,
    U = glfwffi::KEY_U,
    V = glfwffi::KEY_V,
    W = glfwffi::KEY_W,
    X = glfwffi::KEY_X,
    Y = glfwffi::KEY_Y,
    Z = glfwffi::KEY_Z,
    LeftBracket = glfwffi::KEY_LEFT_BRACKET,
    Backslash = glfwffi::KEY_BACKSLASH,
    RightBracket = glfwffi::KEY_RIGHT_BRACKET,
    GraveAccent = glfwffi::KEY_GRAVE_ACCENT,
    World1 = glfwffi::KEY_WORLD_1,
    World2 = glfwffi::KEY_WORLD_2,

    Escape = glfwffi::KEY_ESCAPE,
    Enter = glfwffi::KEY_ENTER,
    Tab = glfwffi::KEY_TAB,
    Backspace = glfwffi::KEY_BACKSPACE,
    Insert = glfwffi::KEY_INSERT,
    Delete = glfwffi::KEY_DELETE,
    Right = glfwffi::KEY_RIGHT,
    Left = glfwffi::KEY_LEFT,
    Down = glfwffi::KEY_DOWN,
    Up = glfwffi::KEY_UP,
    PageUp = glfwffi::KEY_PAGE_UP,
    PageDown = glfwffi::KEY_PAGE_DOWN,
    Home = glfwffi::KEY_HOME,
    End = glfwffi::KEY_END,
    CapsLock = glfwffi::KEY_CAPS_LOCK,
    ScrollLock = glfwffi::KEY_SCROLL_LOCK,
    NumLock = glfwffi::KEY_NUM_LOCK,
    PrintScreen = glfwffi::KEY_PRINT_SCREEN,
    Pause = glfwffi::KEY_PAUSE,
    F1 = glfwffi::KEY_F1,
    F2 = glfwffi::KEY_F2,
    F3 = glfwffi::KEY_F3,
    F4 = glfwffi::KEY_F4,
    F5 = glfwffi::KEY_F5,
    F6 = glfwffi::KEY_F6,
    F7 = glfwffi::KEY_F7,
    F8 = glfwffi::KEY_F8,
    F9 = glfwffi::KEY_F9,
    F10 = glfwffi::KEY_F10,
    F11 = glfwffi::KEY_F11,
    F12 = glfwffi::KEY_F12,
    F13 = glfwffi::KEY_F13,
    F14 = glfwffi::KEY_F14,
    F15 = glfwffi::KEY_F15,
    F16 = glfwffi::KEY_F16,
    F17 = glfwffi::KEY_F17,
    F18 = glfwffi::KEY_F18,
    F19 = glfwffi::KEY_F19,
    F20 = glfwffi::KEY_F20,
    F21 = glfwffi::KEY_F21,
    F22 = glfwffi::KEY_F22,
    F23 = glfwffi::KEY_F23,
    F24 = glfwffi::KEY_F24,
    F25 = glfwffi::KEY_F25,
    Kp0 = glfwffi::KEY_KP_0,
    Kp1 = glfwffi::KEY_KP_1,
    Kp2 = glfwffi::KEY_KP_2,
    Kp3 = glfwffi::KEY_KP_3,
    Kp4 = glfwffi::KEY_KP_4,
    Kp5 = glfwffi::KEY_KP_5,
    Kp6 = glfwffi::KEY_KP_6,
    Kp7 = glfwffi::KEY_KP_7,
    Kp8 = glfwffi::KEY_KP_8,
    Kp9 = glfwffi::KEY_KP_9,
    KpDecimal = glfwffi::KEY_KP_DECIMAL,
    KpDivide = glfwffi::KEY_KP_DIVIDE,
    KpMultiply = glfwffi::KEY_KP_MULTIPLY,
    KpSubtract = glfwffi::KEY_KP_SUBTRACT,
    KpAdd = glfwffi::KEY_KP_ADD,
    KpEnter = glfwffi::KEY_KP_ENTER,
    KpEqual = glfwffi::KEY_KP_EQUAL,
    LeftShift = glfwffi::KEY_LEFT_SHIFT,
    LeftControl = glfwffi::KEY_LEFT_CONTROL,
    LeftAlt = glfwffi::KEY_LEFT_ALT,
    LeftSuper = glfwffi::KEY_LEFT_SUPER,
    RightShift = glfwffi::KEY_RIGHT_SHIFT,
    RightControl = glfwffi::KEY_RIGHT_CONTROL,
    RightAlt = glfwffi::KEY_RIGHT_ALT,
    RightSuper = glfwffi::KEY_RIGHT_SUPER,
    Menu = glfwffi::KEY_MENU,
    Unknown = glfwffi::KEY_UNKNOWN,
}
